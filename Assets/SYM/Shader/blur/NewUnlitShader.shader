// Compiled shader for Windows, Mac, Linux

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Shader Graphs/blur" {
    Properties {
        _Float ("Float", Float) = 1.000000
        [NoScaleOffset] [NonModifiableTextureData] _SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D ("Texture2D", 2D) = "white" { }
        [HideInInspector] _QueueOffset ("_QueueOffset", Float) = 0.000000
        [HideInInspector] _QueueControl ("_QueueControl", Float) = -1.000000
        [HideInInspector] [NoScaleOffset] unity_Lightmaps ("unity_Lightmaps", 2DArray) = "" { }
        [HideInInspector] [NoScaleOffset] unity_LightmapsInd ("unity_LightmapsInd", 2DArray) = "" { }
        [HideInInspector] [NoScaleOffset] unity_ShadowMasks ("unity_ShadowMasks", 2DArray) = "" { }
    }
    SubShader { 
     Tags { "QUEUE"="Transparent" "RenderType"="Transparent" "DisableBatching"="False" "RenderPipeline"="UniversalPipeline" "UniversalMaterialType"="Unlit" "ShaderGraphShader"="true" "ShaderGraphTargetId"="UniversalUnlitSubTarget" }
    
    
     // Stats for Vertex shader:
     //        d3d11: 15 math
     // Stats for Fragment shader:
     //        d3d11: 105 avg math (104..106)
     Pass {
      Name "Universal Forward"
      Tags { "QUEUE"="Transparent" "RenderType"="Transparent" "DisableBatching"="False" "RenderPipeline"="UniversalPipeline" "UniversalMaterialType"="Unlit" "ShaderGraphShader"="true" "ShaderGraphTargetId"="UniversalUnlitSubTarget" }
      ZWrite Off
      Cull Off
      Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha
      //////////////////////////////////
      //                              //
      //      Compiled programs       //
      //                              //
      //////////////////////////////////
    //////////////////////////////////////////////////////
    Keywords: <none>
    -- Hardware tier variant: Tier 1
    -- Vertex shader for "d3d11":
    // Stats: 15 math, 2 temp registers
    Uses vertex data channel "Vertex"
    Uses vertex data channel "Normal"
    Uses vertex data channel "TexCoord0"
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Matrix4x4 unity_MatrixVP at 1248
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Matrix4x4 unity_ObjectToWorld at 0
      Matrix4x4 unity_WorldToObject at 64
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // POSITION                 0   xyz         0     NONE   float   xyz 
    // NORMAL                   0   xyz         1     NONE   float   xyz 
    // TANGENT                  0   xyzw        2     NONE   float       
    // TEXCOORD                 0   xyzw        3     NONE   float   xyzw
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xyzw
    // INTERP                   0   xyzw        1     NONE   float   xyzw
    // INTERP                   1   xyz         2     NONE   float   xyz 
    // INTERP                   2   xyz         3     NONE   float   xyz 
    //
          vs_4_0
          dcl_constantbuffer CB0[82], immediateIndexed
          dcl_constantbuffer CB1[7], immediateIndexed
          dcl_input v0.xyz
          dcl_input v1.xyz
          dcl_input v3.xyzw
          dcl_output_siv o0.xyzw, position
          dcl_output o1.xyzw
          dcl_output o2.xyz
          dcl_output o3.xyz
          dcl_temps 2
       0: mul r0.xyz, v0.yyyy, cb1[1].xyzx
       1: mad r0.xyz, cb1[0].xyzx, v0.xxxx, r0.xyzx
       2: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
       3: add r0.xyz, r0.xyzx, cb1[3].xyzx
       4: mul r1.xyzw, r0.yyyy, cb0[79].xyzw
       5: mad r1.xyzw, cb0[78].xyzw, r0.xxxx, r1.xyzw
       6: mad r1.xyzw, cb0[80].xyzw, r0.zzzz, r1.xyzw
       7: mov o2.xyz, r0.xyzx
       8: add o0.xyzw, r1.xyzw, cb0[81].xyzw
       9: mov o1.xyzw, v3.xyzw
      10: dp3 r0.x, v1.xyzx, cb1[4].xyzx
      11: dp3 r0.y, v1.xyzx, cb1[5].xyzx
      12: dp3 r0.z, v1.xyzx, cb1[6].xyzx
      13: dp3 r0.w, r0.xyzx, r0.xyzx
      14: max r0.w, r0.w, l(0.000000)
      15: rsq r0.w, r0.w
      16: mul o3.xyz, r0.wwww, r0.xyzx
      17: ret 
    // Approximately 0 instruction slots used
    
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 104 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 1 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    //
          ps_4_0
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b r1.xyzw, v1.xyxx, t1.xyzw, s1, cb0[4].x
     106: mul r0.xy, r0.xxxx, r1.xyxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb1[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b r0.xyzw, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: DIRLIGHTMAP_COMBINED LIGHTMAP_ON
    -- Hardware tier variant: Tier 1
    -- Vertex shader for "d3d11":
    // Stats: 15 math, 2 temp registers
    Uses vertex data channel "Vertex"
    Uses vertex data channel "Normal"
    Uses vertex data channel "TexCoord0"
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Matrix4x4 unity_MatrixVP at 1248
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Matrix4x4 unity_ObjectToWorld at 0
      Matrix4x4 unity_WorldToObject at 64
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // POSITION                 0   xyz         0     NONE   float   xyz 
    // NORMAL                   0   xyz         1     NONE   float   xyz 
    // TANGENT                  0   xyzw        2     NONE   float       
    // TEXCOORD                 0   xyzw        3     NONE   float   xyzw
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xyzw
    // INTERP                   0   xyzw        1     NONE   float   xyzw
    // INTERP                   1   xyz         2     NONE   float   xyz 
    // INTERP                   2   xyz         3     NONE   float   xyz 
    //
          vs_4_0
          dcl_constantbuffer CB0[82], immediateIndexed
          dcl_constantbuffer CB1[7], immediateIndexed
          dcl_input v0.xyz
          dcl_input v1.xyz
          dcl_input v3.xyzw
          dcl_output_siv o0.xyzw, position
          dcl_output o1.xyzw
          dcl_output o2.xyz
          dcl_output o3.xyz
          dcl_temps 2
       0: mul r0.xyz, v0.yyyy, cb1[1].xyzx
       1: mad r0.xyz, cb1[0].xyzx, v0.xxxx, r0.xyzx
       2: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
       3: add r0.xyz, r0.xyzx, cb1[3].xyzx
       4: mul r1.xyzw, r0.yyyy, cb0[79].xyzw
       5: mad r1.xyzw, cb0[78].xyzw, r0.xxxx, r1.xyzw
       6: mad r1.xyzw, cb0[80].xyzw, r0.zzzz, r1.xyzw
       7: mov o2.xyz, r0.xyzx
       8: add o0.xyzw, r1.xyzw, cb0[81].xyzw
       9: mov o1.xyzw, v3.xyzw
      10: dp3 r0.x, v1.xyzx, cb1[4].xyzx
      11: dp3 r0.y, v1.xyzx, cb1[5].xyzx
      12: dp3 r0.z, v1.xyzx, cb1[6].xyzx
      13: dp3 r0.w, r0.xyzx, r0.xyzx
      14: max r0.w, r0.w, l(0.000000)
      15: rsq r0.w, r0.w
      16: mul o3.xyz, r0.wwww, r0.xyzx
      17: ret 
    // Approximately 0 instruction slots used
    
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 104 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 1 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    //
          ps_4_0
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b r1.xyzw, v1.xyxx, t1.xyzw, s1, cb0[4].x
     106: mul r0.xy, r0.xxxx, r1.xyxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb1[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b r0.xyzw, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: _WRITE_RENDERING_LAYERS
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 106 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      ScalarInt _RenderingLayerMaxInt at 176
      Float _RenderingLayerRcpMaxInt at 180
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Vector4 unity_RenderingLayer at 160
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 2 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    // SV_Target                1   xyzw        1   TARGET   float   xyzw
    //
          ps_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[11], immediateIndexed
          dcl_constantbuffer CB2[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_output o1.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(0, 0, 5, 5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8, 8, 0, 0)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5, 5, 0, 0)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(0, 0, 8, 8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(0, 0, 5, 5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8, 8, 0, 0)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(0, 0, 5, 5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8, 8, 0, 0)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5, 5, 0, 0)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(0, 0, 8, 8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b_indexable(texture2d)(float,float,float,float) r0.yz, v1.xyxx, t1.zxyw, s1, cb0[4].x
     106: mul r0.xy, r0.yzyy, r0.xxxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb2[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: and r0.x, cb0[11].x, cb1[10].x
     124: utof r0.x, r0.x
     125: mul_sat o1.x, r0.x, cb0[11].y
     126: mov o1.yzw, l(0,0,0,0)
     127: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: DIRLIGHTMAP_COMBINED LIGHTMAP_ON _WRITE_RENDERING_LAYERS
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 106 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      ScalarInt _RenderingLayerMaxInt at 176
      Float _RenderingLayerRcpMaxInt at 180
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Vector4 unity_RenderingLayer at 160
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 2 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    // SV_Target                1   xyzw        1   TARGET   float   xyzw
    //
          ps_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[11], immediateIndexed
          dcl_constantbuffer CB2[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_output o1.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(0, 0, 5, 5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8, 8, 0, 0)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5, 5, 0, 0)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(0, 0, 8, 8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(0, 0, 5, 5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8, 8, 0, 0)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(0, 0, 5, 5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8, 8, 0, 0)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5, 5, 0, 0)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(0, 0, 8, 8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b_indexable(texture2d)(float,float,float,float) r0.yz, v1.xyxx, t1.zxyw, s1, cb0[4].x
     106: mul r0.xy, r0.yzyy, r0.xxxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb2[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: and r0.x, cb0[11].x, cb1[10].x
     124: utof r0.x, r0.x
     125: mul_sat o1.x, r0.x, cb0[11].y
     126: mov o1.yzw, l(0,0,0,0)
     127: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: _SCREEN_SPACE_OCCLUSION
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 104 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 1 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    //
          ps_4_0
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b r1.xyzw, v1.xyxx, t1.xyzw, s1, cb0[4].x
     106: mul r0.xy, r0.xxxx, r1.xyxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb1[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b r0.xyzw, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: DIRLIGHTMAP_COMBINED LIGHTMAP_ON _SCREEN_SPACE_OCCLUSION
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 104 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 1 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    //
          ps_4_0
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b r1.xyzw, v1.xyxx, t1.xyzw, s1, cb0[4].x
     106: mul r0.xy, r0.xxxx, r1.xyxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb1[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b r0.xyzw, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: _SCREEN_SPACE_OCCLUSION _WRITE_RENDERING_LAYERS
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 106 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      ScalarInt _RenderingLayerMaxInt at 176
      Float _RenderingLayerRcpMaxInt at 180
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Vector4 unity_RenderingLayer at 160
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 2 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    // SV_Target                1   xyzw        1   TARGET   float   xyzw
    //
          ps_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[11], immediateIndexed
          dcl_constantbuffer CB2[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_output o1.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(0, 0, 5, 5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8, 8, 0, 0)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5, 5, 0, 0)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(0, 0, 8, 8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(0, 0, 5, 5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8, 8, 0, 0)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(0, 0, 5, 5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8, 8, 0, 0)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5, 5, 0, 0)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(0, 0, 8, 8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b_indexable(texture2d)(float,float,float,float) r0.yz, v1.xyxx, t1.zxyw, s1, cb0[4].x
     106: mul r0.xy, r0.yzyy, r0.xxxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb2[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: and r0.x, cb0[11].x, cb1[10].x
     124: utof r0.x, r0.x
     125: mul_sat o1.x, r0.x, cb0[11].y
     126: mov o1.yzw, l(0,0,0,0)
     127: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: DIRLIGHTMAP_COMBINED LIGHTMAP_ON _SCREEN_SPACE_OCCLUSION _WRITE_RENDERING_LAYERS
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 106 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      ScalarInt _RenderingLayerMaxInt at 176
      Float _RenderingLayerRcpMaxInt at 180
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Vector4 unity_RenderingLayer at 160
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 2 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    // SV_Target                1   xyzw        1   TARGET   float   xyzw
    //
          ps_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[11], immediateIndexed
          dcl_constantbuffer CB2[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_output o1.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(0, 0, 5, 5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8, 8, 0, 0)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5, 5, 0, 0)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(0, 0, 8, 8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(0, 0, 5, 5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8, 8, 0, 0)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(0, 0, 5, 5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8, 8, 0, 0)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5, 5, 0, 0)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(0, 0, 8, 8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b_indexable(texture2d)(float,float,float,float) r0.yz, v1.xyxx, t1.zxyw, s1, cb0[4].x
     106: mul r0.xy, r0.yzyy, r0.xxxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb2[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: and r0.x, cb0[11].x, cb1[10].x
     124: utof r0.x, r0.x
     125: mul_sat o1.x, r0.x, cb0[11].y
     126: mov o1.yzw, l(0,0,0,0)
     127: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: _DBUFFER_MRT3
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 104 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 1 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    //
          ps_4_0
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b r1.xyzw, v1.xyxx, t1.xyzw, s1, cb0[4].x
     106: mul r0.xy, r0.xxxx, r1.xyxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb1[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b r0.xyzw, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: DIRLIGHTMAP_COMBINED LIGHTMAP_ON _DBUFFER_MRT3
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 104 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 1 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    //
          ps_4_0
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b r1.xyzw, v1.xyxx, t1.xyzw, s1, cb0[4].x
     106: mul r0.xy, r0.xxxx, r1.xyxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb1[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b r0.xyzw, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: _DBUFFER_MRT3 _WRITE_RENDERING_LAYERS
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 106 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      ScalarInt _RenderingLayerMaxInt at 176
      Float _RenderingLayerRcpMaxInt at 180
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Vector4 unity_RenderingLayer at 160
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 2 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    // SV_Target                1   xyzw        1   TARGET   float   xyzw
    //
          ps_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[11], immediateIndexed
          dcl_constantbuffer CB2[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_output o1.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(0, 0, 5, 5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8, 8, 0, 0)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5, 5, 0, 0)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(0, 0, 8, 8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(0, 0, 5, 5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8, 8, 0, 0)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(0, 0, 5, 5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8, 8, 0, 0)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5, 5, 0, 0)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(0, 0, 8, 8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b_indexable(texture2d)(float,float,float,float) r0.yz, v1.xyxx, t1.zxyw, s1, cb0[4].x
     106: mul r0.xy, r0.yzyy, r0.xxxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb2[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: and r0.x, cb0[11].x, cb1[10].x
     124: utof r0.x, r0.x
     125: mul_sat o1.x, r0.x, cb0[11].y
     126: mov o1.yzw, l(0,0,0,0)
     127: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: DIRLIGHTMAP_COMBINED LIGHTMAP_ON _DBUFFER_MRT3 _WRITE_RENDERING_LAYERS
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 106 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      ScalarInt _RenderingLayerMaxInt at 176
      Float _RenderingLayerRcpMaxInt at 180
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Vector4 unity_RenderingLayer at 160
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 2 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    // SV_Target                1   xyzw        1   TARGET   float   xyzw
    //
          ps_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[11], immediateIndexed
          dcl_constantbuffer CB2[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_output o1.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(0, 0, 5, 5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8, 8, 0, 0)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5, 5, 0, 0)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(0, 0, 8, 8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(0, 0, 5, 5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8, 8, 0, 0)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(0, 0, 5, 5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8, 8, 0, 0)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5, 5, 0, 0)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(0, 0, 8, 8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b_indexable(texture2d)(float,float,float,float) r0.yz, v1.xyxx, t1.zxyw, s1, cb0[4].x
     106: mul r0.xy, r0.yzyy, r0.xxxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb2[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: and r0.x, cb0[11].x, cb1[10].x
     124: utof r0.x, r0.x
     125: mul_sat o1.x, r0.x, cb0[11].y
     126: mov o1.yzw, l(0,0,0,0)
     127: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: _DBUFFER_MRT3 _SCREEN_SPACE_OCCLUSION
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 104 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 1 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    //
          ps_4_0
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b r1.xyzw, v1.xyxx, t1.xyzw, s1, cb0[4].x
     106: mul r0.xy, r0.xxxx, r1.xyxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb1[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b r0.xyzw, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: DIRLIGHTMAP_COMBINED LIGHTMAP_ON _DBUFFER_MRT3 _SCREEN_SPACE_OCCLUSION
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 104 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 1 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    //
          ps_4_0
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b r1.xyzw, v1.xyxx, t1.xyzw, s1, cb0[4].x
     106: mul r0.xy, r0.xxxx, r1.xyxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb1[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b r0.xyzw, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: _DBUFFER_MRT3 _SCREEN_SPACE_OCCLUSION _WRITE_RENDERING_LAYERS
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 106 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      ScalarInt _RenderingLayerMaxInt at 176
      Float _RenderingLayerRcpMaxInt at 180
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Vector4 unity_RenderingLayer at 160
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 2 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    // SV_Target                1   xyzw        1   TARGET   float   xyzw
    //
          ps_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[11], immediateIndexed
          dcl_constantbuffer CB2[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_output o1.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(0, 0, 5, 5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8, 8, 0, 0)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5, 5, 0, 0)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(0, 0, 8, 8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(0, 0, 5, 5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8, 8, 0, 0)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(0, 0, 5, 5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8, 8, 0, 0)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5, 5, 0, 0)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(0, 0, 8, 8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b_indexable(texture2d)(float,float,float,float) r0.yz, v1.xyxx, t1.zxyw, s1, cb0[4].x
     106: mul r0.xy, r0.yzyy, r0.xxxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb2[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: and r0.x, cb0[11].x, cb1[10].x
     124: utof r0.x, r0.x
     125: mul_sat o1.x, r0.x, cb0[11].y
     126: mov o1.yzw, l(0,0,0,0)
     127: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: DIRLIGHTMAP_COMBINED LIGHTMAP_ON _DBUFFER_MRT3 _SCREEN_SPACE_OCCLUSION _WRITE_RENDERING_LAYERS
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 106 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      ScalarInt _RenderingLayerMaxInt at 176
      Float _RenderingLayerRcpMaxInt at 180
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Vector4 unity_RenderingLayer at 160
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 2 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyzw        1     NONE   float   xy  
    // INTERP                   1   xyz         2     NONE   float       
    // INTERP                   2   xyz         3     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    // SV_Target                1   xyzw        1   TARGET   float   xyzw
    //
          ps_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[11], immediateIndexed
          dcl_constantbuffer CB2[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v1.xy
          dcl_output o0.xyzw
          dcl_output o1.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v1.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(0, 0, 5, 5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8, 8, 0, 0)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5, 5, 0, 0)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(0, 0, 8, 8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(0, 0, 5, 5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8, 8, 0, 0)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(0, 0, 5, 5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8, 8, 0, 0)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v1.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5, 5, 0, 0)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(0, 0, 8, 8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b_indexable(texture2d)(float,float,float,float) r0.yz, v1.xyxx, t1.zxyw, s1, cb0[4].x
     106: mul r0.xy, r0.yzyy, r0.xxxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb2[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(1.000000)
     123: and r0.x, cb0[11].x, cb1[10].x
     124: utof r0.x, r0.x
     125: mul_sat o1.x, r0.x, cb0[11].y
     126: mov o1.yzw, l(0,0,0,0)
     127: ret 
    // Approximately 0 instruction slots used
    
    
     }
    
    
     // Stats for Vertex shader:
     //        d3d11: 22 math, 2 branch
     // Stats for Fragment shader:
     //        d3d11: 6 avg math (5..7)
     Pass {
      Name "MotionVectors"
      Tags { "LIGHTMODE"="MOTIONVECTORS" "QUEUE"="Transparent" "RenderType"="Transparent" "DisableBatching"="False" "RenderPipeline"="UniversalPipeline" "UniversalMaterialType"="Unlit" "ShaderGraphShader"="true" "ShaderGraphTargetId"="UniversalUnlitSubTarget" }
      Cull Off
      ColorMask RG
      //////////////////////////////////
      //                              //
      //      Compiled programs       //
      //                              //
      //////////////////////////////////
    //////////////////////////////////////////////////////
    Keywords: <none>
    -- Hardware tier variant: Tier 1
    -- Vertex shader for "d3d11":
    // Stats: 22 math, 3 temp registers, 2 branches
    Uses vertex data channel "Vertex"
    Uses vertex data channel "TexCoord4"
    
    Constant Buffer "$Globals" (2080 bytes) on slot 0 {
      Matrix4x4 unity_MatrixVP at 1248
      Matrix4x4 _PrevViewProjMatrix at 1424
      Matrix4x4 _NonJitteredViewProjMatrix at 1488
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Matrix4x4 unity_ObjectToWorld at 0
      Matrix4x4 unity_MatrixPreviousM at 544
      Vector4 unity_MotionVectorsParams at 672
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // POSITION                 0   xyz         0     NONE   float   xyz 
    // TEXCOORD                 4   xyz         1     NONE   float   xyz 
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // CLIP_POSITION_NO_JITTER     0   xyz         0     NONE   float   xyz 
    // PREVIOUS_CLIP_POSITION_NO_JITTER     0   xyz         1     NONE   float   xyz 
    // SV_POSITION              0   xyzw        2      POS   float   xyzw
    //
          vs_4_0
          dcl_constantbuffer CB0[97], immediateIndexed
          dcl_constantbuffer CB1[43], immediateIndexed
          dcl_input v0.xyz
          dcl_input v1.xyz
          dcl_output o0.xyz
          dcl_output o1.xyz
          dcl_output_siv o2.xyzw, position
          dcl_temps 3
       0: mul r0.xyz, v0.yyyy, cb1[1].xyzx
       1: mad r0.xyz, cb1[0].xyzx, v0.xxxx, r0.xyzx
       2: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
       3: add r0.xyz, r0.xyzx, cb1[3].xyzx
       4: mul r1.xyzw, r0.yyyy, cb0[79].xyzw
       5: mad r1.xyzw, cb0[78].xyzw, r0.xxxx, r1.xyzw
       6: mad r1.xyzw, cb0[80].xyzw, r0.zzzz, r1.xyzw
       7: add o2.xyzw, r1.xyzw, cb0[81].xyzw
       8: ne r0.w, cb1[42].y, l(0.000000)
       9: if_nz r0.w
      10:   eq r0.w, cb1[42].x, l(1.000000)
      11:   movc r1.xyz, r0.wwww, v1.xyzx, v0.xyzx
      12:   mul r2.xyz, r0.yyyy, cb0[94].xywx
      13:   mad r0.xyw, cb0[93].xyxw, r0.xxxx, r2.xyxz
      14:   mad r0.xyz, cb0[95].xywx, r0.zzzz, r0.xywx
      15:   add o0.xyz, r0.xyzx, cb0[96].xywx
      16:   mul r0.xyzw, r1.yyyy, cb1[35].xyzw
      17:   mad r0.xyzw, cb1[34].xyzw, r1.xxxx, r0.xyzw
      18:   mad r0.xyzw, cb1[36].xyzw, r1.zzzz, r0.xyzw
      19:   add r0.xyzw, r0.xyzw, cb1[37].xyzw
      20:   mul r1.xyz, r0.yyyy, cb0[90].xywx
      21:   mad r1.xyz, cb0[89].xywx, r0.xxxx, r1.xyzx
      22:   mad r0.xyz, cb0[91].xywx, r0.zzzz, r1.xyzx
      23:   mad o1.xyz, cb0[92].xywx, r0.wwww, r0.xyzx
      24: else 
      25:   mov o0.xyz, l(0,0,0,0)
      26:   mov o1.xyz, l(0,0,0,0)
      27: endif 
      28: ret 
    // Approximately 0 instruction slots used
    
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 7 math, 1 temp registers
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 0 {
      Vector4 unity_MotionVectorsParams at 672
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // CLIP_POSITION_NO_JITTER     0   xyz         0     NONE   float   xyz 
    // PREVIOUS_CLIP_POSITION_NO_JITTER     0   xyz         1     NONE   float   xyz 
    // SV_POSITION              0   xyzw        2      POS   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    //
          ps_4_0
          dcl_constantbuffer CB0[43], immediateIndexed
          dcl_input_ps linear v0.xyz
          dcl_input_ps linear v1.xyz
          dcl_output o0.xyzw
          dcl_temps 1
       0: div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), v1.z
       1: mul r0.xy, r0.xxxx, v1.xyxx
       2: div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), v0.z
       3: mad r0.xy, v0.xyxx, r0.zzzz, -r0.xyxx
       4: mul r0.xy, r0.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000)
       5: ne r0.z, cb0[42].y, l(0.000000)
       6: and o0.xy, r0.xyxx, r0.zzzz
       7: mov o0.zw, l(0,0,0,0)
       8: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: _WRITE_RENDERING_LAYERS
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 5 math, 1 temp registers
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 0 {
      Vector4 unity_MotionVectorsParams at 672
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // CLIP_POSITION_NO_JITTER     0   xyz         0     NONE   float   xyz 
    // PREVIOUS_CLIP_POSITION_NO_JITTER     0   xyz         1     NONE   float   xyz 
    // SV_POSITION              0   xyzw        2      POS   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    //
          ps_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[43], immediateIndexed
          dcl_input_ps linear v0.xyz
          dcl_input_ps linear v1.xyz
          dcl_output o0.xyzw
          dcl_temps 1
       0: rcp r0.x, v1.z
       1: mul r0.xy, r0.xxxx, v1.xyxx
       2: rcp r0.z, v0.z
       3: mad r0.xy, v0.xyxx, r0.zzzz, -r0.xyxx
       4: mul r0.xy, r0.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000)
       5: ne r0.z, cb0[42].y, l(0.000000)
       6: and o0.xy, r0.xyxx, r0.zzzz
       7: mov o0.zw, l(0,0,0,0)
       8: ret 
    // Approximately 0 instruction slots used
    
    
     }
    
    
     // Stats for Vertex shader:
     //        d3d11: 15 math
     // Stats for Fragment shader:
     //        d3d11: 4 avg math (3..5)
     Pass {
      Name "DepthNormalsOnly"
      Tags { "LIGHTMODE"="DepthNormalsOnly" "QUEUE"="Transparent" "RenderType"="Transparent" "DisableBatching"="False" "RenderPipeline"="UniversalPipeline" "UniversalMaterialType"="Unlit" "ShaderGraphShader"="true" "ShaderGraphTargetId"="UniversalUnlitSubTarget" }
      Cull Off
      //////////////////////////////////
      //                              //
      //      Compiled programs       //
      //                              //
      //////////////////////////////////
    //////////////////////////////////////////////////////
    Keywords: <none>
    -- Hardware tier variant: Tier 1
    -- Vertex shader for "d3d11":
    // Stats: 15 math, 2 temp registers
    Uses vertex data channel "Vertex"
    Uses vertex data channel "Normal"
    
    Constant Buffer "$Globals" (2080 bytes) on slot 0 {
      Matrix4x4 unity_MatrixVP at 1248
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Matrix4x4 unity_ObjectToWorld at 0
      Matrix4x4 unity_WorldToObject at 64
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // POSITION                 0   xyz         0     NONE   float   xyz 
    // NORMAL                   0   xyz         1     NONE   float   xyz 
    // TANGENT                  0   xyzw        2     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xyzw
    // INTERP                   0   xyz         1     NONE   float   xyz 
    //
          vs_4_0
          dcl_constantbuffer CB0[82], immediateIndexed
          dcl_constantbuffer CB1[7], immediateIndexed
          dcl_input v0.xyz
          dcl_input v1.xyz
          dcl_output_siv o0.xyzw, position
          dcl_output o1.xyz
          dcl_temps 2
       0: mul r0.xyz, v0.yyyy, cb1[1].xyzx
       1: mad r0.xyz, cb1[0].xyzx, v0.xxxx, r0.xyzx
       2: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
       3: add r0.xyz, r0.xyzx, cb1[3].xyzx
       4: mul r1.xyzw, r0.yyyy, cb0[79].xyzw
       5: mad r1.xyzw, cb0[78].xyzw, r0.xxxx, r1.xyzw
       6: mad r0.xyzw, cb0[80].xyzw, r0.zzzz, r1.xyzw
       7: add o0.xyzw, r0.xyzw, cb0[81].xyzw
       8: dp3 r0.x, v1.xyzx, cb1[4].xyzx
       9: dp3 r0.y, v1.xyzx, cb1[5].xyzx
      10: dp3 r0.z, v1.xyzx, cb1[6].xyzx
      11: dp3 r0.w, r0.xyzx, r0.xyzx
      12: max r0.w, r0.w, l(0.000000)
      13: rsq r0.w, r0.w
      14: mul o1.xyz, r0.wwww, r0.xyzx
      15: ret 
    // Approximately 0 instruction slots used
    
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 3 math, 1 temp registers
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float       
    // INTERP                   0   xyz         1     NONE   float   xyz 
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    //
          ps_4_0
          dcl_input_ps linear v1.xyz
          dcl_output o0.xyzw
          dcl_temps 1
       0: dp3 r0.x, v1.xyzx, v1.xyzx
       1: rsq r0.x, r0.x
       2: mul o0.xyz, r0.xxxx, v1.xyzx
       3: mov o0.w, l(0)
       4: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: _WRITE_RENDERING_LAYERS
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 5 math, 1 temp registers
    Constant Buffer "$Globals" (2080 bytes) on slot 0 {
      ScalarInt _RenderingLayerMaxInt at 176
      Float _RenderingLayerRcpMaxInt at 180
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Vector4 unity_RenderingLayer at 160
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float       
    // INTERP                   0   xyz         1     NONE   float   xyz 
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    // SV_Target                1   xyzw        1   TARGET   float   xyzw
    //
          ps_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[12], immediateIndexed
          dcl_constantbuffer CB1[11], immediateIndexed
          dcl_input_ps linear v1.xyz
          dcl_output o0.xyzw
          dcl_output o1.xyzw
          dcl_temps 1
       0: dp3 r0.x, v1.xyzx, v1.xyzx
       1: rsq r0.x, r0.x
       2: mul o0.xyz, r0.xxxx, v1.xyzx
       3: mov o0.w, l(0)
       4: and r0.x, cb0[11].x, cb1[10].x
       5: utof r0.x, r0.x
       6: mul_sat o1.x, r0.x, cb0[11].y
       7: mov o1.yzw, l(0,0,0,0)
       8: ret 
    // Approximately 0 instruction slots used
    
    
     }
    
    
     // Stats for Vertex shader:
     //        d3d11: 28 avg math (26..30)
     Pass {
      Name "ShadowCaster"
      Tags { "LIGHTMODE"="SHADOWCASTER" "QUEUE"="Transparent" "RenderType"="Transparent" "DisableBatching"="False" "RenderPipeline"="UniversalPipeline" "UniversalMaterialType"="Unlit" "ShaderGraphShader"="true" "ShaderGraphTargetId"="UniversalUnlitSubTarget" }
      Cull Off
      ColorMask 0
      //////////////////////////////////
      //                              //
      //      Compiled programs       //
      //                              //
      //////////////////////////////////
    //////////////////////////////////////////////////////
    Keywords: <none>
    -- Hardware tier variant: Tier 1
    -- Vertex shader for "d3d11":
    // Stats: 26 math, 2 temp registers
    Uses vertex data channel "Vertex"
    Uses vertex data channel "Normal"
    
    Constant Buffer "$Globals" (2112 bytes) on slot 0 {
      Matrix4x4 unity_MatrixVP at 1248
      Vector4 _ShadowBias at 2064
      Vector3 _LightDirection at 2080
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Matrix4x4 unity_ObjectToWorld at 0
      Matrix4x4 unity_WorldToObject at 64
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // POSITION                 0   xyz         0     NONE   float   xyz 
    // NORMAL                   0   xyz         1     NONE   float   xyz 
    // TANGENT                  0   xyzw        2     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xyzw
    // INTERP                   0   xyz         1     NONE   float   xyz 
    //
          vs_4_0
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[7], immediateIndexed
          dcl_input v0.xyz
          dcl_input v1.xyz
          dcl_output_siv o0.xyzw, position
          dcl_output o1.xyz
          dcl_temps 2
       0: mul r0.xyz, v0.yyyy, cb1[1].xyzx
       1: mad r0.xyz, cb1[0].xyzx, v0.xxxx, r0.xyzx
       2: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
       3: add r0.xyz, r0.xyzx, cb1[3].xyzx
       4: mad r0.xyz, cb0[130].xyzx, cb0[129].xxxx, r0.xyzx
       5: dp3 r1.x, v1.xyzx, cb1[4].xyzx
       6: dp3 r1.y, v1.xyzx, cb1[5].xyzx
       7: dp3 r1.z, v1.xyzx, cb1[6].xyzx
       8: dp3 r0.w, r1.xyzx, r1.xyzx
       9: max r0.w, r0.w, l(0.000000)
      10: rsq r0.w, r0.w
      11: mul r1.xyz, r0.wwww, r1.xyzx
      12: dp3_sat r0.w, cb0[130].xyzx, r1.xyzx
      13: add r0.w, -r0.w, l(1.000000)
      14: mul r0.w, r0.w, cb0[129].y
      15: mad r0.xyz, r1.xyzx, r0.wwww, r0.xyzx
      16: mov o1.xyz, r1.xyzx
      17: mul r1.xyzw, r0.yyyy, cb0[79].xyzw
      18: mad r1.xyzw, cb0[78].xyzw, r0.xxxx, r1.xyzw
      19: mad r0.xyzw, cb0[80].xyzw, r0.zzzz, r1.xyzw
      20: add r0.xyzw, r0.xyzw, cb0[81].xyzw
      21: min r1.x, r0.w, r0.z
      22: add r1.x, -r0.z, r1.x
      23: round_ne r1.y, cb0[129].z
      24: eq r1.y, r1.y, l(1.000000)
      25: and r1.y, r1.y, l(0x3f800000)
      26: mad o0.z, r1.y, r1.x, r0.z
      27: mov o0.xyw, r0.xyxw
      28: ret 
    // Approximately 0 instruction slots used
    
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float       
    // INTERP                   0   xyz         1     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
    //
          ps_4_0
          dcl_output o0.xyzw
       0: mov o0.xyzw, l(0,0,0,0)
       1: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: _CASTING_PUNCTUAL_LIGHT_SHADOW
    -- Hardware tier variant: Tier 1
    -- Vertex shader for "d3d11":
    // Stats: 30 math, 3 temp registers
    Uses vertex data channel "Vertex"
    Uses vertex data channel "Normal"
    
    Constant Buffer "$Globals" (2112 bytes) on slot 0 {
      Matrix4x4 unity_MatrixVP at 1248
      Vector4 _ShadowBias at 2064
      Vector3 _LightPosition at 2096
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Matrix4x4 unity_ObjectToWorld at 0
      Matrix4x4 unity_WorldToObject at 64
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // POSITION                 0   xyz         0     NONE   float   xyz 
    // NORMAL                   0   xyz         1     NONE   float   xyz 
    // TANGENT                  0   xyzw        2     NONE   float       
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xyzw
    // INTERP                   0   xyz         1     NONE   float   xyz 
    //
          vs_4_0
          dcl_constantbuffer CB0[132], immediateIndexed
          dcl_constantbuffer CB1[7], immediateIndexed
          dcl_input v0.xyz
          dcl_input v1.xyz
          dcl_output_siv o0.xyzw, position
          dcl_output o1.xyz
          dcl_temps 3
       0: mul r0.xyz, v0.yyyy, cb1[1].xyzx
       1: mad r0.xyz, cb1[0].xyzx, v0.xxxx, r0.xyzx
       2: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
       3: add r0.xyz, r0.xyzx, cb1[3].xyzx
       4: add r1.xyz, -r0.xyzx, cb0[131].xyzx
       5: dp3 r0.w, r1.xyzx, r1.xyzx
       6: rsq r0.w, r0.w
       7: mul r1.xyz, r0.wwww, r1.xyzx
       8: mad r0.xyz, r1.xyzx, cb0[129].xxxx, r0.xyzx
       9: dp3 r2.x, v1.xyzx, cb1[4].xyzx
      10: dp3 r2.y, v1.xyzx, cb1[5].xyzx
      11: dp3 r2.z, v1.xyzx, cb1[6].xyzx
      12: dp3 r0.w, r2.xyzx, r2.xyzx
      13: max r0.w, r0.w, l(0.000000)
      14: rsq r0.w, r0.w
      15: mul r2.xyz, r0.wwww, r2.xyzx
      16: dp3_sat r0.w, r1.xyzx, r2.xyzx
      17: add r0.w, -r0.w, l(1.000000)
      18: mul r0.w, r0.w, cb0[129].y
      19: mad r0.xyz, r2.xyzx, r0.wwww, r0.xyzx
      20: mov o1.xyz, r2.xyzx
      21: mul r1.xyzw, r0.yyyy, cb0[79].xyzw
      22: mad r1.xyzw, cb0[78].xyzw, r0.xxxx, r1.xyzw
      23: mad r0.xyzw, cb0[80].xyzw, r0.zzzz, r1.xyzw
      24: add r0.xyzw, r0.xyzw, cb0[81].xyzw
      25: min r1.x, r0.w, r0.z
      26: add r1.x, -r0.z, r1.x
      27: round_ne r1.y, cb0[129].z
      28: eq r1.y, r1.y, l(1.000000)
      29: and r1.y, r1.y, l(0x3f800000)
      30: mad o0.z, r1.y, r1.x, r0.z
      31: mov o0.xyw, r0.xyxw
      32: ret 
    // Approximately 0 instruction slots used
    
    
    -- Fragment shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
     }
    
    
     // Stats for Vertex shader:
     //        d3d11: 15 math
     // Stats for Fragment shader:
     //        d3d11: 107 math
     Pass {
      Name "GBuffer"
      Tags { "LIGHTMODE"="UniversalGBuffer" "QUEUE"="Transparent" "RenderType"="Transparent" "DisableBatching"="False" "RenderPipeline"="UniversalPipeline" "UniversalMaterialType"="Unlit" "ShaderGraphShader"="true" "ShaderGraphTargetId"="UniversalUnlitSubTarget" }
      ZWrite Off
      Cull Off
      Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha
      //////////////////////////////////
      //                              //
      //      Compiled programs       //
      //                              //
      //////////////////////////////////
    //////////////////////////////////////////////////////
    Keywords: <none>
    -- Hardware tier variant: Tier 1
    -- Vertex shader for "d3d11":
    // Stats: 15 math, 2 temp registers
    Uses vertex data channel "Vertex"
    Uses vertex data channel "Normal"
    Uses vertex data channel "TexCoord0"
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Matrix4x4 unity_MatrixVP at 1248
    }
    Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
      Matrix4x4 unity_ObjectToWorld at 0
      Matrix4x4 unity_WorldToObject at 64
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // POSITION                 0   xyz         0     NONE   float   xyz 
    // NORMAL                   0   xyz         1     NONE   float   xyz 
    // TANGENT                  0   xyzw        2     NONE   float       
    // TEXCOORD                 0   xyzw        3     NONE   float   xyzw
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xyzw
    // INTERP                   0   xyz         1     NONE   float   xyz 
    // INTERP                   2   xyzw        2     NONE   float   xyzw
    // INTERP                   3   xyz         3     NONE   float   xyz 
    // INTERP                   4   xyz         4     NONE   float   xyz 
    //
          vs_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[82], immediateIndexed
          dcl_constantbuffer CB1[7], immediateIndexed
          dcl_input v0.xyz
          dcl_input v1.xyz
          dcl_input v3.xyzw
          dcl_output_siv o0.xyzw, position
          dcl_output o1.xyz
          dcl_output o2.xyzw
          dcl_output o3.xyz
          dcl_output o4.xyz
          dcl_temps 2
       0: mul r0.xyz, v0.yyyy, cb1[1].xyzx
       1: mad r0.xyz, cb1[0].xyzx, v0.xxxx, r0.xyzx
       2: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
       3: add r0.xyz, r0.xyzx, cb1[3].xyzx
       4: mul r1.xyzw, r0.yyyy, cb0[79].xyzw
       5: mad r1.xyzw, cb0[78].xyzw, r0.xxxx, r1.xyzw
       6: mad r1.xyzw, cb0[80].xyzw, r0.zzzz, r1.xyzw
       7: mov o3.xyz, r0.xyzx
       8: add o0.xyzw, r1.xyzw, cb0[81].xyzw
       9: mov o1.xyz, l(0,0,0,0)
      10: mov o2.xyzw, v3.xyzw
      11: dp3 r0.x, v1.xyzx, cb1[4].xyzx
      12: dp3 r0.y, v1.xyzx, cb1[5].xyzx
      13: dp3 r0.z, v1.xyzx, cb1[6].xyzx
      14: dp3 r0.w, r0.xyzx, r0.xyzx
      15: max r0.w, r0.w, l(0.000000)
      16: rsq r0.w, r0.w
      17: mul o4.xyz, r0.wwww, r0.xyzx
      18: ret 
    // Approximately 0 instruction slots used
    
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 107 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 1 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyz         1     NONE   float       
    // INTERP                   2   xyzw        2     NONE   float   xy  
    // INTERP                   3   xyz         3     NONE   float       
    // INTERP                   4   xyz         4     NONE   float   xyz 
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    // SV_Target                1   xyzw        1   TARGET   float   xyzw
    // SV_Target                2   xyzw        2   TARGET   float   xyzw
    // SV_Target                3   xyzw        3   TARGET   float   xyzw
    //
          ps_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v2.xy
          dcl_input_ps linear v4.xyz
          dcl_output o0.xyzw
          dcl_output o1.xyzw
          dcl_output o2.xyzw
          dcl_output o3.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v2.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(0, 0, 5, 5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8, 8, 0, 0)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5, 5, 0, 0)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(0, 0, 8, 8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(0, 0, 5, 5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8, 8, 0, 0)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(0, 0, 5, 5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8, 8, 0, 0)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v2.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5, 5, 0, 0)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(0, 0, 8, 8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b_indexable(texture2d)(float,float,float,float) r0.yz, v2.xyxx, t1.zxyw, s1, cb0[4].x
     106: mul r0.xy, r0.yzyy, r0.xxxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb1[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(0)
     123: mov o1.xyzw, l(0,0,0,1.000000)
     124: dp3 r0.x, v4.xyzx, v4.xyzx
     125: rsq r0.x, r0.x
     126: mul o2.xyz, r0.xxxx, v4.xyzx
     127: mov o2.w, l(0)
     128: mov o3.xyzw, l(0,0,0,1.000000)
     129: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: _SCREEN_SPACE_OCCLUSION
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 107 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 1 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyz         1     NONE   float       
    // INTERP                   2   xyzw        2     NONE   float   xy  
    // INTERP                   3   xyz         3     NONE   float       
    // INTERP                   4   xyz         4     NONE   float   xyz 
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    // SV_Target                1   xyzw        1   TARGET   float   xyzw
    // SV_Target                2   xyzw        2   TARGET   float   xyzw
    // SV_Target                3   xyzw        3   TARGET   float   xyzw
    //
          ps_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v2.xy
          dcl_input_ps linear v4.xyz
          dcl_output o0.xyzw
          dcl_output o1.xyzw
          dcl_output o2.xyzw
          dcl_output o3.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v2.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(0, 0, 5, 5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8, 8, 0, 0)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5, 5, 0, 0)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(0, 0, 8, 8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(0, 0, 5, 5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8, 8, 0, 0)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(0, 0, 5, 5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8, 8, 0, 0)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v2.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5, 5, 0, 0)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(0, 0, 8, 8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b_indexable(texture2d)(float,float,float,float) r0.yz, v2.xyxx, t1.zxyw, s1, cb0[4].x
     106: mul r0.xy, r0.yzyy, r0.xxxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb1[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(0)
     123: mov o1.xyzw, l(0,0,0,1.000000)
     124: dp3 r0.x, v4.xyzx, v4.xyzx
     125: rsq r0.x, r0.x
     126: mul o2.xyz, r0.xxxx, v4.xyzx
     127: mov o2.w, l(0)
     128: mov o3.xyzw, l(0,0,0,1.000000)
     129: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: _DBUFFER_MRT3
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 107 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 1 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyz         1     NONE   float       
    // INTERP                   2   xyzw        2     NONE   float   xy  
    // INTERP                   3   xyz         3     NONE   float       
    // INTERP                   4   xyz         4     NONE   float   xyz 
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    // SV_Target                1   xyzw        1   TARGET   float   xyzw
    // SV_Target                2   xyzw        2   TARGET   float   xyzw
    // SV_Target                3   xyzw        3   TARGET   float   xyzw
    //
          ps_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v2.xy
          dcl_input_ps linear v4.xyz
          dcl_output o0.xyzw
          dcl_output o1.xyzw
          dcl_output o2.xyzw
          dcl_output o3.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v2.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(0, 0, 5, 5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8, 8, 0, 0)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5, 5, 0, 0)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(0, 0, 8, 8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(0, 0, 5, 5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8, 8, 0, 0)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(0, 0, 5, 5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8, 8, 0, 0)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v2.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5, 5, 0, 0)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(0, 0, 8, 8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b_indexable(texture2d)(float,float,float,float) r0.yz, v2.xyxx, t1.zxyw, s1, cb0[4].x
     106: mul r0.xy, r0.yzyy, r0.xxxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb1[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(0)
     123: mov o1.xyzw, l(0,0,0,1.000000)
     124: dp3 r0.x, v4.xyzx, v4.xyzx
     125: rsq r0.x, r0.x
     126: mul o2.xyz, r0.xxxx, v4.xyzx
     127: mov o2.w, l(0)
     128: mov o3.xyzw, l(0,0,0,1.000000)
     129: ret 
    // Approximately 0 instruction slots used
    
    
    //////////////////////////////////////////////////////
    Keywords: _DBUFFER_MRT3 _SCREEN_SPACE_OCCLUSION
    -- Vertex shader for "d3d11":
    // No shader variant for this keyword set. The closest match will be used instead.
    
    -- Hardware tier variant: Tier 1
    -- Fragment shader for "d3d11":
    // Stats: 107 math, 4 temp registers
    Set 2D Texture "_CameraOpaqueTexture" to slot 0
    Set 2D Texture "_SampleTexture2D_9b9bd807058e42bcbdc69549426e4600_Texture_1_Texture2D" to slot 1
    
    Constant Buffer "$Globals" (2096 bytes) on slot 0 {
      Vector4 _ScaledScreenParams at 48
      Vector2 _GlobalMipBias at 64
      Vector4 _ProjectionParams at 352
      Vector4 _RTHandleScale at 448
      Vector4 _CameraOpaqueTexture_TexelSize at 2080
    }
    Constant Buffer "UnityPerMaterial" (96 bytes) on slot 1 {
      Float _Float at 16
    }
    
    Shader Disassembly:
    //
    // Generated by Microsoft (R) D3D Shader Disassembler
    //
    //
    // Input signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_POSITION              0   xyzw        0      POS   float   xy  
    // INTERP                   0   xyz         1     NONE   float       
    // INTERP                   2   xyzw        2     NONE   float   xy  
    // INTERP                   3   xyz         3     NONE   float       
    // INTERP                   4   xyz         4     NONE   float   xyz 
    //
    //
    // Output signature:
    //
    // Name                 Index   Mask Register SysValue  Format   Used
    // -------------------- ----- ------ -------- -------- ------- ------
    // SV_Target                0   xyzw        0   TARGET   float   xyzw
    // SV_Target                1   xyzw        1   TARGET   float   xyzw
    // SV_Target                2   xyzw        2   TARGET   float   xyzw
    // SV_Target                3   xyzw        3   TARGET   float   xyzw
    //
          ps_5_0
          dcl_globalFlags refactoringAllowed
          dcl_constantbuffer CB0[131], immediateIndexed
          dcl_constantbuffer CB1[2], immediateIndexed
          dcl_sampler s0, mode_default
          dcl_sampler s1, mode_default
          dcl_resource_texture2d (float,float,float,float) t0
          dcl_resource_texture2d (float,float,float,float) t1
          dcl_input_ps_siv linear noperspective v0.xy, position
          dcl_input_ps linear v2.xy
          dcl_input_ps linear v4.xyz
          dcl_output o0.xyzw
          dcl_output o1.xyzw
          dcl_output o2.xyzw
          dcl_output o3.xyzw
          dcl_temps 4
       0: mul r0.xyzw, v2.xyxy, l(100.199997, 100.199997, 50.099998, 50.099998)
       1: round_ni r1.xyzw, r0.xyzw
       2: frc r0.xyzw, r0.xyzw
       3: add r2.xyzw, r1.xyzw, l(1.000000, 1.000000, 1.000000, 0.000000)
       4: ftoi r2.xyzw, r2.xyzw
       5: xor r2.yw, r2.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
       6: iadd r2.xz, r2.yywy, r2.xxzx
       7: imul null, r2.xy, r2.ywyy, r2.xzxx
       8: ushr r2.zw, r2.xxxy, l(0, 0, 5, 5)
       9: xor r2.xy, r2.zwzz, r2.xyxx
      10: imul null, r2.xy, r2.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      11: ushr r2.xy, r2.xyxx, l(8, 8, 0, 0)
      12: ftoi r3.xyzw, r1.xyzw
      13: xor r2.zw, r3.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      14: iadd r3.xy, r2.zwzz, r3.xzxx
      15: imul null, r2.zw, r2.zzzw, r3.xxxy
      16: ushr r3.xy, r2.zwzz, l(5, 5, 0, 0)
      17: xor r2.zw, r2.zzzw, r3.xxxy
      18: imul null, r2.zw, r2.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      19: ushr r2.zw, r2.zzzw, l(0, 0, 8, 8)
      20: utof r2.xyzw, r2.xyzw
      21: mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      22: mad r2.y, r2.y, l(0.000000), -r2.w
      23: mul r3.xyzw, r0.xyzw, r0.xyzw
      24: mad r0.xyzw, -r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
      25: mul r0.xyzw, r0.xyzw, r3.xyzw
      26: mad r2.y, r0.z, r2.y, r2.w
      27: add r3.xyzw, r1.zwzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      28: add r1.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      29: ftoi r1.xyzw, r1.xyzw
      30: ftoi r3.xyzw, r3.xyzw
      31: xor r3.yw, r3.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      32: iadd r3.xz, r3.yywy, r3.xxzx
      33: imul null, r3.xy, r3.ywyy, r3.xzxx
      34: ushr r3.zw, r3.xxxy, l(0, 0, 5, 5)
      35: xor r3.xy, r3.zwzz, r3.xyxx
      36: imul null, r3.xy, r3.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      37: ushr r3.xy, r3.xyxx, l(8, 8, 0, 0)
      38: utof r3.xy, r3.xyxx
      39: mul r2.w, r3.x, l(0.000000)
      40: mad r3.x, r3.y, l(0.000000), -r2.w
      41: mad r0.z, r0.z, r3.x, r2.w
      42: add r0.z, -r2.y, r0.z
      43: mad r0.z, r0.w, r0.z, r2.y
      44: mul r0.z, r0.z, l(0.250000)
      45: xor r1.yw, r1.yyyw, l(0, 0x41c64e6d, 0, 0x41c64e6d)
      46: iadd r1.xz, r1.yywy, r1.xxzx
      47: imul null, r1.xy, r1.ywyy, r1.xzxx
      48: ushr r1.zw, r1.xxxy, l(0, 0, 5, 5)
      49: xor r1.xy, r1.zwzz, r1.xyxx
      50: imul null, r1.xy, r1.xyxx, l(0x27d4eb2d, 0x27d4eb2d, 0, 0)
      51: ushr r1.xy, r1.xyxx, l(8, 8, 0, 0)
      52: utof r1.xy, r1.xyxx
      53: mad r0.w, r1.x, l(0.000000), -r2.z
      54: mul r1.x, r1.y, l(0.000000)
      55: mad r0.w, r0.x, r0.w, r2.z
      56: mad r1.y, r2.x, l(0.000000), -r1.x
      57: mad r0.x, r0.x, r1.y, r1.x
      58: add r0.x, -r0.w, r0.x
      59: mad r0.x, r0.y, r0.x, r0.w
      60: mad r0.x, r0.x, l(0.125000), r0.z
      61: mul r0.yz, v2.xxyx, l(0.000000, 25.049999, 25.049999, 0.000000)
      62: round_ni r1.xy, r0.yzyy
      63: frc r0.yz, r0.yyzy
      64: add r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      65: ftoi r1.zw, r1.zzzw
      66: xor r0.w, r1.w, l(0x41c64e6d)
      67: iadd r1.z, r0.w, r1.z
      68: imul null, r0.w, r0.w, r1.z
      69: ushr r1.z, r0.w, l(5)
      70: xor r0.w, r0.w, r1.z
      71: imul null, r0.w, r0.w, l(0x27d4eb2d)
      72: ushr r0.w, r0.w, l(8)
      73: utof r0.w, r0.w
      74: add r2.xyzw, r1.xyxy, l(1.000000, 0.000000, 0.000000, 1.000000)
      75: ftoi r1.xy, r1.xyxx
      76: ftoi r2.xyzw, r2.xyzw
      77: xor r1.zw, r2.yyyw, l(0, 0, 0x41c64e6d, 0x41c64e6d)
      78: iadd r2.xy, r1.zwzz, r2.xzxx
      79: imul null, r1.zw, r1.zzzw, r2.xxxy
      80: ushr r2.xy, r1.zwzz, l(5, 5, 0, 0)
      81: xor r1.zw, r1.zzzw, r2.xxxy
      82: imul null, r1.zw, r1.zzzw, l(0, 0, 0x27d4eb2d, 0x27d4eb2d)
      83: ushr r1.zw, r1.zzzw, l(0, 0, 8, 8)
      84: utof r1.zw, r1.zzzw
      85: mul r1.w, r1.w, l(0.000000)
      86: mad r0.w, r0.w, l(0.000000), -r1.w
      87: mul r2.xy, r0.yzyy, r0.yzyy
      88: mad r0.yz, -r0.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
      89: mul r0.yz, r0.yyzy, r2.xxyx
      90: mad r0.w, r0.y, r0.w, r1.w
      91: xor r1.y, r1.y, l(0x41c64e6d)
      92: iadd r1.x, r1.y, r1.x
      93: imul null, r1.x, r1.y, r1.x
      94: ushr r1.y, r1.x, l(5)
      95: xor r1.x, r1.y, r1.x
      96: imul null, r1.x, r1.x, l(0x27d4eb2d)
      97: ushr r1.x, r1.x, l(8)
      98: utof r1.x, r1.x
      99: mul r1.x, r1.x, l(0.000000)
     100: mad r1.y, r1.z, l(0.000000), -r1.x
     101: mad r0.y, r0.y, r1.y, r1.x
     102: add r0.w, -r0.y, r0.w
     103: mad r0.y, r0.z, r0.w, r0.y
     104: mad r0.x, r0.y, l(0.500000), r0.x
     105: sample_b_indexable(texture2d)(float,float,float,float) r0.yz, v2.xyxx, t1.zxyw, s1, cb0[4].x
     106: mul r0.xy, r0.yzyy, r0.xxxx
     107: log r0.xy, r0.xyxx
     108: mul r0.xy, r0.xyxx, cb1[1].xxxx
     109: exp r0.xy, r0.xyxx
     110: lt r0.z, cb0[22].x, l(0.000000)
     111: add r0.w, -v0.y, cb0[3].y
     112: movc r1.y, r0.z, r0.w, v0.y
     113: mov r1.x, v0.x
     114: div r1.xy, r1.xyxx, cb0[3].xyxx
     115: add r1.z, -r1.y, l(1.000000)
     116: add r0.xy, r0.xyxx, r1.xzxx
     117: mad r0.zw, -cb0[130].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 1.000000, 1.000000)
     118: min r0.xy, r0.zwzz, r0.xyxx
     119: mul r0.xy, r0.xyxx, cb0[28].xyxx
     120: sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0, cb0[4].x
     121: mov o0.xyz, r0.xyzx
     122: mov o0.w, l(0)
     123: mov o1.xyzw, l(0,0,0,1.000000)
     124: dp3 r0.x, v4.xyzx, v4.xyzx
     125: rsq r0.x, r0.x
     126: mul o2.xyz, r0.xxxx, v4.xyzx
     127: mov o2.w, l(0)
     128: mov o3.xyzw, l(0,0,0,1.000000)
     129: ret 
    // Approximately 0 instruction slots used
    
    
     }
    }
    CustomEditor "UnityEditor.ShaderGraph.GenericShaderGraphMaterialGUI"
    Fallback "Hidden/Shader Graph/FallbackError"
    }